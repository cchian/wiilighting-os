/*ไฟล์ .png 12 byte สุดท้ายจะเป็นแพทเทิลนี้หมดเลย 0x00,0x00,0x00,0x00,0x49,0x45,0x4E,0x44,0xAE,0x42,0x60,0x82
 * 
 * สำหรับหลัการทำงานคร่าวๆ นั้น จะอธิบายเป็นสว่นๆ เพื่อความเข้าใจ
 * โดยระบบนี้ อุปกรณ์จะประกอบไปด้วย 2 ส่วนหลัก ได้แก่ UI และ Device
 * UI หรือ ส่วนติดต่อสำหรับสั่งงาน มี หลายแบบ หลักๆก็จะมี Android Application กับ Web Application การสั่งงานอุปกรณ์จาก UI ทั้ง 2 แบบดังกล่าว สามารถกระทำได้ทั้ง ออนไลน์และออฟไลน์
 * โดยเริ่มแรก ตัว Device จะทำงานในโหมด AP เพื่อรอรับการเชื่อมต่อสำหรับการตั้งค่าการทำงานเล็กน้อย
 * หลังจากการตั้งค่าเสร็จสิ้น เมื่ออุปกรณ์เริ่มทำงานใหม่ ก็จะเริ่มทำงานตามที่ตั้งค่าเอาไว้ สำหรับการตั้งค่าอุปกรณ์นั้น สามารถเข้าไปดูข้อมูลเพิ่มเติมได้ที่ http://githup.com/cchian/GearDev
 * 
 // Message ที่จะสั่งงาน อุปกรณ์นี้ จะมีอยู่ 5 เคส ด้านล่าง ใช้ได้ทั้งในส่วนของ NetpieMicrogear Websocket และ Serial สำหรับสั่งงานบอร์ด Arduino ซึ่งการสั่งงานบอร์ด Arduino นี้ตัว ESP8266 จะทำหน้าที่เอง
 // {x}=!          | x คือแชลแนลที่ต้องการ ! หมายถึงกลับสถานะระหว่าง ON|OFF (ON มีค่าเท่ากับ 255 | OFF มีค่าเท่ากับ 0, ที่ค่า ON มีค่าเท่ากับ 255 เนื่องจากว่าต้องรองรับขาที่เป็น PWM ด้วย ซึ่งค่าที่ใช้จะอยู่ในช่วย 0-255 นั่นเอง)
 // {x}={v}        | x คือแชลแนลที่ต้องการ v คือสถานะปิดเปิด ค่าตั้งแต่ 0-255 คลอบคลุมอุปกรณ์ไฟฟ้าส่องสว่างที่สามารถปรับความสว่างได้
 // ?              | ? คือ ขอดูสถานะแชลแนลทั้งหมด เรียงจากแชลแนลเลขน้อยสุดไปหามากสุด
 // a={v}          | a คือ all หมายถึงแชลแนลทั้งหมด v คือ ค่าตั้งแต่ 0-255 เพื่อส่งสถานะให้แชลแนลทั้งหมด
 // {v}>{2},{4},{5}| ที่อยู่ด้านซ้ายของ > คือ {v} หมายถึงค่าสถานะที่จะส่งให้แชลแนล รูปแบบนี้มีข้อดีคือ สามรถเลือกแชลแนลที่ต้องการได้ ตังตัวอย่างคือแชลแนล 2,4,5 ตามลำดับ
 * 
 // เพิ่มเติมในส่วนของบอร์ด Arduino คือ
 // enr={true|false} คือการอนุญาตให้คืนค่าสถานะของขาสัญญาณก่อนที่ไฟจะดับ เมื่ออุปกรณ์เริ่มทำงานอีกครั้งนั่นเอง
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */
